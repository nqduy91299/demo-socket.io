<!--
  Created by: Mai Van Manh
  Date: 11/02/2020
-->

<style>
  * {
    box-sizing: border-box;
  }

  .user {
    display: flex;
    align-items: center;
    padding: 12px 24px;
    cursor: pointer;
  }

  .user:nth-child(odd) {
    background-color: #F4F5F7;
  }

  .user:hover {
    background-color: #E6EFFF;
    transition: 0.3s;
  }

  .avatar {
    font-weight: bold;
    font-size: 1.5rem;
    background-color: deepskyblue;
    width: 50px;
    height: 50px;
    margin-right: 16px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white
  }

  .user-info {
    height: 50px;
    flex-grow: 1;
  }

  .user-name {
    font-size: 1.1rem;
  }

  .user-info .online {
    font-size: 0.9rem;
    color: rgb(99, 99, 99)
  }

  .user .status {
    width: 90px;
    text-align: center;
  }

  .user:hover {
    background-color: #E6EFFF;
  }

  .user:hover .avatar {
    background-color: rgb(7, 142, 204);
    transition: 0.3s;
  }

  .user:hover .user-name {
    font-weight: 450;
    transition: 0.3s;
  }
</style>

<body>
  <div class="container">
    <div class="row justify-content-center">
      <div class="col-md-7">
        <div class="rounded border mt-5 mb-3">
          <h4 class="text-primary text-center my-5">Danh sách người dùng trực tuyến</h4>
          <p style="padding: 0 24px">Số người online:
            <strong id="count-length" class="badge badge-danger badge-pill">0</strong>
          </p>
          <div id="users-list" class="people">

          </div>
          <p class="small">Danh sách này cần được cập nhật tự động mỗi khi có người dùng đăng nhập hoặc đăng xuất/thoát.
            Ngoài ra trạng thái của mỗi người dùng cũng cần được cập nhật mỗi khi họ tham gia hoặc rời một cuộc trò
            chuyện.</p>
          <p class="small">Để cho đơn giản, trang web chỉ cần hỗ trợ với mỗi người vào một thời điểm, không thể chat với
            người có trạng thái là <strong>đang bận</strong>.</p>
        </div>
      </div>

      <div id="online-notification" class="alert alert-success d-inline position-fixed small fade"
        style="bottom: 20px; left: 20px">
        <strong>Trần Quang Trí</strong> vừa mới online
      </div>
      <div id="offline-notification" class="alert alert-danger d-inline position-fixed small fade"
        style="bottom: 20px; right: 20px">
        <strong>Trần Quang Trí</strong> đã thoát khỏi ứng dụng
      </div>

</body>
<script src="/socket.io/socket.io.js"></script>
<script>
  let socket;
  let usernameClient = sessionStorage.getItem('lab10-web');
  let usersList = [];

  $(document).ready(() => {

    if (!usernameClient) {
      window.location.href = '/'
    }

    socket = io();

    socket.on('connect', handleConnection)
    socket.on('disconnect', () => console.log('Disconnect successfully'));

    socket.on('list-users', handleListUsers);
    socket.on('new-user', handleNewUser)
    socket.on('exit-user', handleExitUser)
    socket.on('register-username', newUserWithUsername)

    socket.on('error', () => console.log("error: " + e.message))


    function handleConnection() {
      if (!usernameClient) {
        usernameClient = prompt('Enter your username');
      }
      document.title = 'Login - ' + usernameClient
      sessionStorage.setItem('lab10-web', usernameClient)
      socket.emit('register-username', usernameClient)
    }

    function handleListUsers(users) {
      users.forEach(user => {
        if (user.id !== socket.id) {
          usersList.push(user);
          displayUsers(user)
        }
      })
    }
    function handleNewUser(user) {
      usersList.push(user);
    }
    function handleExitUser(data) {
      const { id, username } = data
      let usernameExit;
      usersList = usersList.filter(u => {
        if (u.id === id) {
          usernameExit = u.username
        }
        return u.id != id
      });
      removeUser(id)
      notifyOffline(usernameExit)
    }
    function newUserWithUsername(data) {
      const { id, username } = data;
      let user = usersList.find(u => u.id == id);
      if (!user) {
      }
      user.username = username;

      displayUsers(data)
      notifyOnline(user.username)
    }

  })

  function displayUsers(user) {
    const id = user.id;
    const userDiv = $(`
            <div id="${id}" class="user" >
              <div class="avatar">${user.username[0]}</div>
              <div class="user-info">
                <div class="user-name">${user.username}</div>
                <div class="online">Truy cập lúc: 17:00'</div>
              </div>
              <div class="status">
                <div class="badge badge-success badge-pill">Đang rảnh</div>
              </div>  
            </div>
      `);
    $('#users-list').append(userDiv);
    $('#count-length').html($('#users-list .user').length);
    $(`#${id}`).click((e) => {
      window.location.href = `/chat/${user.username}`
    })
  }

  function removeUser(id) {
    $(`#${id}`).remove();
    $('#count-length').html($('#users-list .user').length);
  }

  function notifyOnline(username) {
    $('#online-notification strong').html(username);
    $('#online-notification').fadeTo(1000, 1)
    setTimeout(() => {
      $('#online-notification').fadeTo(1000, 0);
    }, 3000)
  }
  function notifyOffline(username) {
    $('#offline-notification strong').html(username);
    $('#offline-notification').fadeTo(1000, 1);
    setTimeout(() => {
      $('#offline-notification').fadeTo(1000, 0);
    }, 3000)
  }


</script>